dnl $Id: configure.in,v 1.126.2.7 2001-12-31 20:09:38 srittau Exp $
dnl configure.in for netatalk

AC_INIT(bin/adv1tov2/adv1tov2.c)

NETATALK_VERSION=`cat VERSION`
AC_SUBST(NETATALK_VERSION)

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(netatalk, ${NETATALK_VERSION})
AM_CONFIG_HEADER(config.h)

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

dnl *********************************************************************
dnl FIXME! FIXME! These should be selectable properly, and should produce
dnl the proper flags and defines...
dnl *********************************************************************

dnl Checks for libraries.
dnl Replace `main' with a function in -labs:
AC_CHECK_LIB(abs, main)
dnl Replace `main' with a function in -laudit:
AC_CHECK_LIB(audit, main)
dnl Replace `main' with a function in -lauth:
AC_CHECK_LIB(auth, main)
dnl Replace `main' with a function in -lcmd:
AC_CHECK_LIB(cmd, main)
dnl Replace `main' with a function in -lcrypt:
AC_CHECK_LIB(crypt, main)
dnl Replace `main' with a function in -ld:
AC_CHECK_LIB(d, main)
dnl Replace `main' with a function in -ldl:
AC_CHECK_LIB(dl, main)
dnl Replace `main' with a function in -lkauth:
AC_CHECK_LIB(kauth, main)
dnl Replace `main' with a function in -lkrb:
AC_CHECK_LIB(krb, main)
dnl Replace `main' with a function in -llwp:
AC_CHECK_LIB(lwp, main)
dnl Replace `main' with a function in -ln:
AC_CHECK_LIB(n, main)
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, main)
dnl Replace `main' with a function in -lprot:
AC_CHECK_LIB(prot, main)
dnl Replace `main' with a function in -lrx:
AC_CHECK_LIB(rx, main)
dnl Replace `main' with a function in -lrxkad:
AC_CHECK_LIB(rxkad, main)
dnl Replace `main' with a function in -lsocket:
AC_CHECK_LIB(socket, main)
dnl Replace `main' with a function in -lsys:
AC_CHECK_LIB(sys, main)
dnl Replace `main' with a function in -lubik:
AC_CHECK_LIB(ubik, main)

#
# Check presence of some functions
#
# Check for XPG4 access() function
# Be sure to test before adding AFS libs in LIBS path as AFS lib
# has such a function that works only on AFS filesystems.
AC_CHECK_FUNCS(access)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h stdint.h strings.h sys/fcntl.h sys/file.h sys/ioctl.h sys/time.h sys/mnttab.h sys/statvfs.h sys/stat.h sys/vfs.h mntent.h syslog.h unistd.h termios.h sys/termios.h netdb.h sgtty.h ufs/quota.h mount.h sys/mount.h statfs.h sys/types.h dlfcn.h errno.h sys/errno.h)
AC_CHECK_HEADER(sys/cdefs.h,,
	AC_MSG_RESULT([enabling generic cdefs.h from tree])
	CFLAGS="-I\$(top_srcdir)/sys/generic $CFLAGS"
)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_ST_RDEV
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_TYPE_GETGROUPS
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_HEADER_MAJOR
AC_FUNC_MMAP
AC_TYPE_SIGNAL
AC_FUNC_UTIME_NULL
AC_FUNC_WAIT3
AC_CHECK_FUNCS(flock getcwd gethostname gettimeofday getusershell mkdir rmdir select socket strdup strstr strtoul setpgrp strchr memcpy)
AC_FUNC_SETPGRP

dnl --------------------------------------------------------------------------
dnl specific configuration comes in here:
dnl --------------------------------------------------------------------------

AC_DEFINE(ADMIN_GRP, 1)

AC_ARG_WITH(admin-group,
 	[  --disable-admin-group   disable admin group],
        if test "$enableval" = "no"; then
		AC_DEFINE(ADMIN_GRP, 0)
		AC_MSG_RESULT([disabling administrative group support])
        fi
 )

AC_ARG_ENABLE(afs,
 	[  --enable-afs            enable AFS support],
	if test "$enableval" = "yes"; then
		AC_DEFINE(AFS, 1)
		AC_MSG_RESULT([enabling AFS support])
	fi
)

AC_ARG_WITH(pkgconfdir,
	[  --with-pkgconfdir=DIR   package specific configuration in DIR
                          [[SYSCONF/netatalk]]],
		PKGCONFDIR="$withval",
		PKGCONFDIR="${sysconfdir}/netatalk"
)

AC_ARG_WITH(cracklib,
	[  --with-cracklib=DICT    enable/set location of cracklib dictionary],
	if test "x$withval" != "xno" ; then
		cracklib="$withval"
		AC_CHECK_LIB(crack, main,
			AC_DEFINE(USE_CRACKLIB) 
			LIBS="$LIBS -lcrack"
			AC_MSG_RESULT([enabling cracklib support])
			if test "$cracklib" = "yes"; then
				cracklib="/usr/lib/cracklib_dict"
			fi
			AC_DEFINE_UNQUOTED(_PATH_CRACKLIB, "$cracklib",
				[path to cracklib dictionary])
			AC_MSG_RESULT([setting cracklib dictionary to $cracklib]),
			AC_MSG_ERROR([cracklib not found!])
		)
	fi
)

AC_ARG_ENABLE(ddp,
	[  --disable-ddp           disable DDP],
	if test "$enableval" = "no"; then 
		AC_DEFINE(NO_DDP, 1)
		AC_MSG_RESULT([disabling DDP])
	fi
)

AC_ARG_ENABLE(debug,
	[  --enable-debug          enable debug code],
	if test "$enableval" != "no"; then
		if test "$enableval" = "yes"; then
			AC_DEFINE(DEBUG, 1)
		else
			AC_DEFINE_UNQUOTED(DEBUG, $enableval)
		fi 
		AC_MSG_RESULT([enabling debugging code])
	else
		AC_DEFINE(DEBUG, 0)
	fi
)


dnl ----------- A NOTE ABOUT DROPKLUDGE
dnl The trouble with this fix is that if you know what the file is called, it
dnl can be read from the Unix side.  That's okay for most academic institutions
dnl since the students don't have telnet access to the Mac servers.  There is
dnl currently no one working on further development/fixes of DROPKLUDGE.
dnl -----------

AC_ARG_ENABLE(dropkludge,
	[  --enable-dropkludge     enable the experimental dropbox fix (INSECURE!) ],
	if test "$enableval" = "yes"; then 
		AC_DEFINE(DROPKLUDGE, 1)
		AC_MSG_RESULT([enabling experimental dropbox support])
	fi
)

AC_ARG_ENABLE(force-uidgid,
	[  --enable-force-uidgid   allow forcing of uid/gid per volume (BROKEN) ],
	if test "$enableval" = "yes"; then
		AC_DEFINE(FORCE_UIDGID, 1)
		AC_MSG_RESULT([enabling forcing of uid/gid per volume])
	fi
)

dnl Don't use DB3 unless it's needed
db3_required=no


dnl Determine DID scheme
AC_MSG_CHECKING([for DID scheme to use])
AC_ARG_WITH(did,
	[  --with-did=SCHEME       set DID scheme (last,hash,mtab,cnid)],
	[ did_scheme="$withval" ],
	[ did_scheme="last" ]
)

if test "x$did_scheme" = "xlast"; then
	AC_DEFINE(USE_LASTDID, 1)
	AC_MSG_RESULT([last])
elif test "x$did_scheme" = "xhash"; then
	AC_MSG_RESULT([device/inode-based hashing])
elif test "x$did_scheme" = "xmtab"; then
	AC_DEFINE(DID_MTAB, 1)
	AC_MSG_RESULT([mtab-based DID creation support])
elif test "x$did_scheme" = "xcnid"; then
	db3_required="yes"
	AC_DEFINE(CNID_DB, 1)
	AC_MSG_RESULT([enabling build with CNID DB support])
else
	AC_MSG_ERROR([unknown DID scheme])
fi

dnl Check for Berkeley DB3 library
if test "x$db3_required" = "xyes"; then
	AC_PATH_DB3(, [AC_MSG_ERROR([Berkeley DB3 library not found!])])
fi

dnl Check for quota support
AC_CHECK_QUOTA

msg_dir=""
AC_ARG_WITH(message-dir,
	[  --with-message-dir=PATH path to message files [[PKGCONF/msg]]],
		msg_dir="$withval"
		if test x"$msg_dir" = "x"; then
			msg_dir="${PKGCONFDIR}/msg"
		fi
		AC_DEFINE_UNQUOTED(SERVERTEXT, "$msg_dir",
			[path to message dir [[PKGCONF/msg]]])
		SERVERTEXT="$msg_dir"
		AC_SUBST(SERVERTEXT)
)

AC_ARG_ENABLE(srvloc,
	[  --enable-srvloc         turn on Server Location Protocol support (EXPERIMENTAL)],
	srvloc=$enableval,
	srvloc=no
)

dnl Conditional for optional server location protocol support (used by OS X)
AM_CONDITIONAL(USE_SRVLOC, test "x$srvloc" != "xno")
if test "x$srvloc" != "xno"; then
    for slpdir in "" $srvloc /usr /usr/local ; do
		if test -f "$slpdir/include/slp.h" ; then
			LIBS="$LIBS -L$slpdir/lib -lslp"
			CFLAGS="$CFLAGS -I$slpdir/include"
	    	AC_CHECK_LIB(slp,SLPOpen)
	    	AC_CHECK_FUNCS(SLPReg SLPDereg SLPClose)
	    	AC_DEFINE(USE_SRVLOC, 1)
			break
		fi
	done
fi

dnl Check for PAM libs
AC_PATH_PAM([
	PAPD_LIBS="$PAPD_LIBS $PAM_LIBS"
	AFPD_LIBS="$AFPD_LIBS $PAM_LIBS"
	use_pam_so=yes
	compile_pam=yes
	AC_DEFINE(USE_PAM)
])

AC_MSG_CHECKING([whether shadow support should be enabled])
AC_ARG_WITH(shadow,
	[  --with-shadow           enable shadow password support],
	[shadowpw="$withval"],
	[shadowpw=no]
)
if test "x$shadowpw" = "xyes"; then
	AC_DEFINE(SHADOWPW)
fi
AC_MSG_RESULT([$shadowpw])

AC_ARG_ENABLE(shell-check,
	[  --disable-shell-check   disable checking for a valid shell],
	if test "$enableval" = "no"; then 
		AC_DEFINE(DISABLE_SHELLCHECK, 1)
		AC_MSG_RESULT([disabling valid shell check])
	fi
)

AC_MSG_CHECKING([whether flock locks should be enabled])
AC_ARG_WITH(flock-locks,
	[  --with-flock-locks      enable flock locks support],
	[flock_locks="$withval"],
	[flock_locks="no"]
)
if test "x$flock_locks" = "xyes"; then
	AC_DEFINE(USE_FLOCK_LOCKS)
fi
AC_MSG_RESULT([$flock_locks])

AC_ARG_WITH(tcp-wrappers,
	[  --with-tcp-wrappers     enable TCP wrappers support],
	AC_CHECK_LIB(wrap, tcpd_warn,
		AC_DEFINE(TCPWRAP)
		AFPD_LIBS="$AFPD_LIBS -lwrap"
		AC_MSG_RESULT([enabling TCP wrappers support])
	)
)

AC_ARG_ENABLE(redhat,
	[  --enable-redhat         use redhat-style sysv configuration ],
	if test "$enableval" = "yes"; then
		sysv_style=redhat
	fi
	AC_MSG_RESULT([enabling redhat-style sysv support])
)

AC_ARG_ENABLE(suse,
	[  --enable-suse           use suse-style sysv configuration ],
	if test "$enableval" = "yes"; then
		sysv_style=suse
	fi
	AC_MSG_RESULT([enabling suse-style sysv support])
)

AC_ARG_ENABLE(cobalt,
	[  --enable-cobalt         use cobalt-style sysv configuration ],
	if test "$enableval" = "yes"; then
		sysv_style=cobalt
	fi
	AC_MSG_RESULT([enabling cobalt-style sysv support])
)

dnl ----- timelord compilation (disabled by default)
AC_MSG_CHECKING([whether timelord should be compiled])
compile_timelord=no
AC_ARG_ENABLE(timelord,
	[  --enable-timelord       enable compilation of timelord server],
	[compile_timelord="$enableval"],
	[compile_timelord="no"]
)
AC_MSG_RESULT([$compile_timelord])

AC_ARG_WITH(uams-path,
	[  --with-uams-path=PATH   path to UAMs [[PKGCONF/uams]]],
	uams_path="$withval",
	uams_path="${PKGCONFDIR}/uams"
)

dnl --------------------------------------------------------------------------
dnl FHS stuff has to be done last because it overrides other defaults
dnl --------------------------------------------------------------------------

AC_ARG_ENABLE(fhs,
	[  --enable-fhs            use Filesystem Hierarchy Standard (FHS) compatibility],
	if test "$enableval" = "yes"; then
		uams_path="/usr/lib/netatalk"
		sysconfdir="/etc"
		PKGCONFDIR=${sysconfdir}/netatalk
		use_pam_so=yes
		mandir="/usr/share/man"
		AC_DEFINE(FHS_COMPATIBILITY)
	fi
	AC_MSG_RESULT([enabling Filesystem Hierarchy Standard (FHS) compatibility])
)

dnl --------------------------------------------------------------------------
dnl post-FHS substitutions, etc
dnl --------------------------------------------------------------------------

dnl ***** UAMS_PATH
AC_DEFINE_UNQUOTED(UAMS_PATH, "${uams_path}",
	[path to UAMs [default=PKGCONF/uams]])
UAMS_PATH="${uams_path}"
AC_SUBST(UAMS_PATH)

dnl --------------------------------------------------------------------------
dnl drop in includes for top level directory structures here...
dnl --------------------------------------------------------------------------

dnl Note: $(top_srcdir)/include should be added before all other includes
dnl       so that includes from that directory a preferred to includes from
dnl       /usr/include or similar places.
LIBS="$LIBS -L\$(top_srcdir)/libatalk"
CFLAGS="-I\$(top_srcdir)/include $CFLAGS -I\$(top_srcdir)/sys"

dnl --------------------------------------------------------------------------
dnl specific configuration comes in here:
dnl --------------------------------------------------------------------------

dnl ac_cv_target_os is now host_os, ac_cv_target_cpu is now host_cpu

dnl --------------------- determine operating system from "target"
case "$host_os" in
	*aix*)				this_os=aix ;;
	*freebsd*) 			this_os=freebsd ;;
	*hpux11*)			this_os=hpux11 ;;
	*irix*)				this_os=irix ;;
	*linux*)   			this_os=linux ;;
	*osx*)				this_os=macosx ;;
	*darwin*)			this_os=macosx ;;
	*netbsd*) 			this_os=netbsd ;;
	*openbsd*) 			this_os=openbsd ;;
	*osf*) 				this_os=tru64 ;;
	*solaris*) 			this_os=solaris ;;
esac

case "$host_cpu" in
	i386|i486|i586|i686|k7)		this_cpu=x86 ;;
	alpha)						this_cpu=alpha ;;
	mips)						this_cpu=mips ;;
	powerpc|ppc)				this_cpu=ppc ;;
esac

dnl --------------------- operating system specific flags (port from sys/*)

dnl ----- AIX specific -----
if test x"$this_os" = "xaix"; then
	AC_MSG_RESULT([ * AIX specific configuration])
	AC_DEFINE(NO_STRUCT_TM_GMTOFF)

	dnl This is probably a lie; AIX 4.3 supports a 64-bit long
	dnl compilation environment.  It's enough to get things defined
	dnl right in endian.h provided that long long is supported, though.
	AC_DEFINE(HAVE_32BIT_LONGS)
fi

dnl ----- FreeBSD specific -----
if test x"$this_os" = "xfreebsd"; then 
	AC_MSG_RESULT([ * FreeBSD specific configuration])
	AC_DEFINE(BSD4_4)
	AC_DEFINE(SENDFILE_FLAVOR_BSD)

	AC_DEFINE(NO_CRYPT_H, 1)
fi

dnl ----- HP-UX 11 specific -----
if test x"$this_os" = "xhpux11"; then
	AC_MSG_RESULT([ * HP-UX 11 specific configuration])

	AC_DEFINE(_ISOC9X_SOURCE)
	AC_DEFINE(NO_STRUCT_TM_GMTOFF)
fi

dnl ----- IRIX specific -----
if test x"$this_os" = "xirix"; then
	AC_MSG_RESULT([ * IRIX specific configuration])

	AC_DEFINE(NO_STRUCT_TM_GMTOFF)
fi

dnl ----- Linux specific -----
if test x"$this_os" = "xlinux"; then 
	AC_MSG_RESULT([ * Linux specific configuration])

	dnl ----- check if we need the quotactl wrapper
	AC_CHECK_HEADERS(sys/quota.h linux/quota.h)
	AC_CHECK_FUNC(quotactl,,
		AC_DEFINE(NEED_QUOTACTL_WRAPPER)
		AC_MSG_RESULT([enabling quotactl wrapper])
	)

	dnl ----- as far as I can tell, dbtob always does the wrong thing
	dnl ----- on every single version of linux I've ever played with.
	dnl ----- see etc/afpd/quota.c
	AC_DEFINE(HAVE_BROKEN_DBTOB)

	dnl --- added by Yoshinobu Ishizaki (2001.03.13) ---
	dnl ----- check if version is newer than 2.2.x
	changequote(<<,>>)
	majorvers="`uname -r | sed 's/\([0-9]\)..*/\1/'`"
	minorvers="`uname -r | sed 's/[0-9]\.\([0-9]\)\..*/\1/'`"
	if [ $majorvers -ge 2 ]; then
		if [ $minorvers -ge 2 ]; then
			changequote([,])
			AC_MSG_RESULT([ * found Linux 2.2.x or higher])
			AC_DEFINE(SENDFILE_FLAVOR_LINUX)
		else
			AC_MSG_RESULT([ * found Linux 2.0.x ]) 
		fi
	fi

	dnl ----- Linux/alpha specific -----
	if test x"$this_cpu" = "xalpha"; then 
		AC_MSG_RESULT([enabling gcc memcpy bug workaround])
		AC_DEFINE(HAVE_GCC_MEMCPY_BUG)
	fi
	need_dash_r=no
fi

dnl ----- Mac OSX specific -----
if test x"$this_os" = "xmacosx"; then 
	AC_MSG_RESULT([ * Mac OSX specific configuration])
	AC_DEFINE(BSD4_4)
	AC_DEFINE(HAVE_BROKEN_CPP)
	AC_DEFINE(HAVE_2ARG_DBTOB)
	dnl AC_DEFINE(NO_DLFCN_H)
	AC_DEFINE(MACOSX_SERVER)
fi

dnl ----- NetBSD specific -----
if test x"$this_os" = "xnetbsd"; then 
	AC_MSG_RESULT([ * NetBSD specific configuration])
	AC_DEFINE(BSD4_4)
	AC_DEFINE(DLSYM_PREPEND_UNDERSCORE)
	CFLAGS="-I\$(top_srcdir)/sys/netbsd -I/usr/include/kerberosIV $CFLAGS"
	need_dash_r=yes 

	dnl ----- NetBSD does not have crypt.h, uses unistd.h -----
	AC_DEFINE(UAM_DHX, 1)
	AC_DEFINE(NO_CRYPT_H, 1)
fi

dnl ----- OpenBSD specific -----
if test x"$this_os" = "xopenbsd"; then 
	AC_MSG_RESULT([ * OpenBSD specific configuration])
	AC_DEFINE(BSD4_4)
	AC_DEFINE(DLSYM_PREPEND_UNDERSCORE)

	dnl ----- OpenBSD does not have crypt.h, uses unistd.h -----
	AC_DEFINE(UAM_DHX, 1)
	AC_DEFINE(NO_CRYPT_H, 1)
fi

dnl ----- Solaris specific -----
if test x"$this_os" = "xsolaris"; then 
	AC_MSG_RESULT([ * Solaris specific configuration])
	AC_DEFINE(__svr4__)
	AC_DEFINE(_ISOC9X_SOURCE)
	AC_DEFINE(NO_STRUCT_TM_GMTOFF)
	AC_DEFINE(SOLARIS)
	CFLAGS="-I\$(top_srcdir)/sys/generic $CFLAGS"
	need_dash_r=yes

	AC_MSG_RESULT([enabling Solaris kernel module build])
	solaris_module=yes
fi

dnl ----- Tru64 specific -----
if test x"$this_os" = "xtru64"; then 
	AC_MSG_RESULT([ * Tru64 specific configuration])
	AC_DEFINE(NO_DDP)
	AC_DEFINE(HAVE_64BIT_LONGS)
	dnl AC_DEFINE(USE_MOUNT_H)
	AC_DEFINE(USE_OLD_RQUOTA)
	dnl AC_DEFINE(USE_UFS_QUOTA_H)
	AC_DEFINE(TRU64)
	AC_CHECK_LIB(security,set_auth_parameters)
	CFLAGS="-I\$(top_srcdir)/sys/tru64 $CFLAGS"
	need_dash_r=no
	sysv_style=tru64
fi

dnl -- look for openssl
AC_PATH_SSL

dnl --------------------- check for building PGP UAM module

AC_ARG_ENABLE(pgp-uam,
	[  --enable-pgp-uam        enable build of PGP UAM module],
	if test "$enableval" = "yes"; then 
		if test "$compile_ssl" = "yes"; then 
			AC_DEFINE(UAM_PGP, 1)
			compile_pgp=yes
			AC_MSG_RESULT([enabling build with PGP UAM module])
		fi
	fi
)

dnl --------------------- check for building Kerberos v4 UAM module

AC_ARG_ENABLE(krb4-uam,
	[  --enable-krb4-uam       enable build of Kerberos v4 UAM module],
	if test "$enableval" = "yes"; then
		AC_DEFINE(UAM_KRB4, 1)
		compile_kerberos=yes
		AC_MSG_RESULT([enabling build with Kerberos v4 UAM module])
	fi
)
dnl --------------------- overwrite the config files . . . or not.

AC_MSG_CHECKING([whether configuration files should be overwritten])
AC_ARG_ENABLE(overwrite,
	[  --enable-overwrite      overwrite configuration files during installation],
	[OVERWRITE_CONFIG="${enable_overwrite}"],
	[OVERWRITE_CONFIG="no"]
)
AC_MSG_RESULT([$OVERWRITE_CONFIG])

dnl --------------------- last minute substitutions

AC_SUBST(LIBS)
AC_SUBST(AFPD_LIBS)
AC_SUBST(PAPD_LIBS)
AC_SUBST(CFLAGS)
AC_SUBST(PKGCONFDIR)
AC_SUBST(OVERWRITE_CONFIG)

AM_CONDITIONAL(SOLARIS_MODULE, test x$solaris_module = xyes)
AM_CONDITIONAL(COMPILE_TIMELORD, test x$compile_timelord = xyes)
AM_CONDITIONAL(USE_DHX, test x$compile_ssl = xyes)
AM_CONDITIONAL(USE_KERBEROS, test x$compile_kerberos = xyes)
AM_CONDITIONAL(USE_PAM_SO, test x$use_pam_so = xyes)
AM_CONDITIONAL(USE_PAM, test x$compile_pam = xyes)
AM_CONDITIONAL(BUILD_PAM, test x$compile_pam = xyes)
AM_CONDITIONAL(USE_PGP, test x$compile_pgp = xyes)
AM_CONDITIONAL(USE_COBALT, test x$sysv_style = xcobalt)
AM_CONDITIONAL(USE_REDHAT, test x$sysv_style = xredhat)
AM_CONDITIONAL(USE_SUSE, test x$sysv_style = xsuse)
AM_CONDITIONAL(USE_SHADOWPW, test x$shadowpw = xyes)
AM_CONDITIONAL(USE_TRU64, test x$sysv_style = xtru64)

dnl --------------------- generate files

AC_OUTPUT([Makefile
	bin/Makefile
	bin/adv1tov2/Makefile
	bin/aecho/Makefile
	bin/afile/Makefile
	bin/afppasswd/Makefile
	bin/getzones/Makefile
	bin/megatron/Makefile
	bin/nbp/Makefile
	bin/pap/Makefile
	bin/psorder/Makefile
	config/Makefile
	contrib/Makefile
	contrib/macusers/Makefile
	contrib/nu/Makefile
	contrib/printing/Makefile
	contrib/shell_utils/Makefile
	contrib/timelord/Makefile
	distrib/Makefile
	distrib/config/Makefile
	distrib/config/netatalk-config
	distrib/initscripts/Makefile
	distrib/m4/Makefile
	doc/Makefile
	etc/Makefile
	etc/afpd/Makefile
	etc/afpd/nls/Makefile
	etc/atalkd/Makefile
	etc/uams/Makefile
	etc/uams/uams_krb4/Makefile
	etc/papd/Makefile
	etc/psf/Makefile
	include/Makefile
	include/atalk/Makefile
	libatalk/Makefile
	libatalk/adouble/Makefile
	libatalk/asp/Makefile
	libatalk/atp/Makefile
	libatalk/cnid/Makefile
	libatalk/compat/Makefile
	libatalk/dsi/Makefile
	libatalk/nbp/Makefile
	libatalk/netddp/Makefile
	libatalk/util/Makefile
	macros/Makefile
	man/Makefile
	man/man1/Makefile
	man/man3/Makefile
	man/man4/Makefile
	man/man5/Makefile
	man/man8/Makefile
	sys/Makefile
	sys/generic/Makefile
	sys/generic/sys/Makefile
	sys/netatalk/Makefile
	sys/netbsd/Makefile
	sys/netbsd/netatalk/Makefile
	sys/solaris/Makefile
	sys/sunos/Makefile
	sys/ultrix/Makefile
	],
	[chmod a+x distrib/config/netatalk-config contrib/shell_utils/apple_*]
)

